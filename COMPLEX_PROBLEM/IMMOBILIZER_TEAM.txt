/* program for the immobilizer in the car
 * 
 * start
 * define all the registers for the can transmission and reception
 * continuosly transmit the status of the door using address 0x932 with default status as 0 that is closed
 * transmission happeneing in time intervel of 2 seconds
 * receive the can msg when the interupt is occured
 * copy all the receive buffer register values to the arrays including 8 data byte 1 dlc sidl and sidh
 * according to the value in 3 4 5 6 7 byte change the  lock status
 * when all are 0xaa wmake it as open else closed
 */
#pragma config OSC = HS         // Oscillator Selection bits (HS oscillator)
#pragma config OSCS = OFF       // Oscillator System Clock Switch Enable bit (Oscillator system clock switch option is disabled (main oscillator is source))

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = OFF         // Brown-out Reset Enable bit (Brown-out Reset enabled)
#pragma config BORV = 25        // Brown-out Reset Voltage bits (VBOR set to 2.5V)

// CONFIG2H
#pragma config WDT = OFF         // Watchdog Timer Enable bit (WDT enabled)
#pragma config WDTPS = 128      // Watchdog Timer Postscale Select bits (1:128)

// CONFIG4L
#pragma config STVR = OFF        // Stack Full/Underflow Reset Enable bit (Stack Full/Underflow will cause Reset)
#pragma config LVP = OFF         // Low-Voltage ICSP Enable bit (Low-Voltage ICSP enabled)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000200-001FFFh) not code protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000200-001FFFh) not write protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000200-001FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from Table Reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from Table Reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include<xc.h>
#define _XTAL_FREQ 20000000
char data_buf[11];
void System_init();
void can_rx_init();
void set_baudrate();
void can_rx_read();
void set_mode();
void get_mode();
void __interrupt() ISR1();
void mask();
void filter();
void CAN_TX();
void CAN_TX1();
int main()
{
    System_init();
    can_rx_init();
    set_baudrate();
    mask();
    filter();
    while(1)
    {
      //CAN_TX();
       //__delay_ms(2000);
       if(data_buf[6] == 0xAA  && data_buf[7] == 0XAA  && data_buf[8] == 0XAA  && data_buf[9] == 0XAA && data_buf[10] == 0XAA)
       {
           PORTDbits.RD0 = 1;
           __delay_ms(2000);
           CAN_TX();
       }
       else
       {
           PORTDbits.RD0 = 0;
           __delay_ms(2000);
           CAN_TX1();
       }
    }
}
void System_init()
{
    GIE = 1;          //enable the global 
    PEIE = 1;         //enable pheripherial
}
void can_rx_init()
{
    TRISBbits.RB2 = 0;     //transmitting pin in MCU  Tx
    TRISBbits.RB3 = 1;     //receiving pin in MCU Rx
    TRISDbits.RD0 = 0;
    PORTDbits.RD4 = 0;
    PORTDbits.RD0 = 0;
    RXB0IP = 1;
    RXB0IE = 1;
}
void set_mode()
{
    set_baudrate();
}
void get_mode()
{
    CANCON = 0x0E;
}
void set_baudrate()
{
    CANCON = 0x80;      //setting the configuration mode to set baud rate
    while(CANSTAT != 0x80);      //setting the status register
    BRGCON1 = 0XC1;     
    BRGCON2 = 0XAE;        
    BRGCON3 = 0X45;
    CIOCON = 0X20;
    CANCON = 0x08;
}
void mask()
{
//mask registers
    RXM0SIDH = 0x00;
    RXM0SIDL = 0x00;
}
void filter()
{
    RXF0SIDH = 0x00;
    RXF0SIDL = 0x00;
}
void __interrupt() ISR1()    //interupt function
{
    if(RX0IF)
    {
        RX0IF = 0;
        can_rx_read();   //calling read function
    }
}
void can_rx_read()
{
           get_mode();
           
           data_buf[0] = RXB0SIDH;      //receive buffer standard identifer
           data_buf[1] = RXB0SIDL;
           data_buf[2] = RXB0DLC ;  //data length code
           data_buf[3] = RXB0D0 ;  //0-7 registers to receive data
           data_buf[4] = RXB0D1 ;
           data_buf[5] = RXB0D2 ;
           data_buf[6] = RXB0D3 ;
           data_buf[7] = RXB0D4 ;
           data_buf[8] = RXB0D5 ;
           data_buf[9] = RXB0D6 ;
           data_buf[10] = RXB0D7 ;     
           RXB0CONbits.RXB0FUL = 0;  
}
void CAN_TX()
{
     CANCON = 0x08;   //setting to normal mode to transmit data
     TXB0SIDH = 0X00;                   //Transmitting to  address 9F 
     TXB0SIDL = 0X08;
     TXB0EIDH = 0X09;
     TXB0EIDL = 0X32;
     TXB0DLC = 0X08;
     TXB0D0  = 0X00;
     TXB0D1  = 0X00;
     TXB0D2  = 0X00;
     TXB0D3  = 0X01;
     TXB0D4  = 0X00;
     TXB0D5  = 0X00;
     TXB0D6  = 0X00;
     TXB0D7  = 0X00;
     TXB0CON = 0X08;
     CANCON = 0X08;   
}
void CAN_TX1()
{
     CANCON = 0x08;
     TXB0SIDH = 0X00;                   //Transmitting to  address 9F 
     TXB0SIDL = 0X08;
     TXB0EIDH = 0X09;
     TXB0EIDL = 0X32;
     TXB0DLC = 0X08;
     TXB0D0  = 0X00;
     TXB0D1  = 0X00;
     TXB0D2  = 0X00;
     TXB0D3  = 0X00;
     TXB0D4  = 0X00;
     TXB0D5  = 0X00;
     TXB0D6  = 0X00;
     TXB0D7  = 0X00;
     TXB0CON = 0X08;
     CANCON = 0X08;   
}
